// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;

namespace RMX
{

	struct LateLog {
		public LateLog(Testing feature, string message) {
			this.feature = feature;
			this.message = message;
		}
		public Testing feature;
		public string message;
	}

	public class Bugger : ASingleton<Bugger>
	{



		public List<string> Queue = new List<string>();
//		public bool[] f = new bool[(int) Testing.__NULL__];

		private static List<LateLog> _logOnLoad = new List<LateLog> ();
	
		bool _setupComplete = false;
		protected override bool SetupComplete {
			get {
				return _setupComplete ;
			}
		}


		void Start() {
			_setupComplete = true;
			foreach (LateLog log in _logOnLoad) {
				try {
				if (Bugger.WillLog(log.feature, " _LATE_ " + log.message))
					Debug.Log(Bugger.Last);
				} catch (Exception e) {
					Debug.LogWarning(e.Message);
				}
			}
			_logOnLoad.Clear ();
//			Debug.LogWarning ("_logOnLoad.Count = " + _logOnLoad.Count);
			_logOnLoad = null;

//			foreach (object in classType.GetMethods())
		}



		public static bool WillTest(Testing feature) {
			if (IsInitialized)
				return Settings.current.IsDebugging (feature);
//			else 
//				Debug.LogWarning ("Settings have not yet been initialized before attepting to test " + feature.ToString());
			return false;
		}

		public static DebugLog Last {
			get {
				return IsInitialized ? log : null;
			}
		}

	 public static void AddLateLog(Testing feature, string message) {
			if (IsInitialized)
				throw new Exception ("Late Log Was Added too Late! - " + feature + "\n " + message);
//			Debug.LogWarning (feature + " LateLog added: " + message);
			if (_logOnLoad != null) {
				_logOnLoad.Add (new LateLog (feature, message));
			} else if (IsInitialized) {
				Debug.LogWarning ("Tried to add late log but _logOnLoad had already been destroyed:\n" + feature.ToString () + ": " + message); 
			} else {
				_logOnLoad = new List<LateLog> ();
			}
		}

		public static DebugLog StartNewLog(Testing feature) {
			return StartNewLog (feature, "");
		}

		public static DebugLog StartNewLog(Testing feature, string message) {
			return new DebugLog (feature, message);
		}
	


		public static bool WillLog(Testing feature, string message) {
			if (IsInitialized) 
				return log.Set (feature, message);
			else if (Settings.IsInitialized && !Settings.current.IsDebugging (feature)) 
				return false;
			else 
				AddLateLog (feature, message);
			return false;
		}


	

		static DebugLog log = new DebugLog();

		private bool timesUp {
			get{ 
				return settings.printToScreen && Queue.Count > 0 && Time.fixedTime - _startedAt > settings.maxDisplayTime;
			}
		}

		private int timeRemaining {
			get {
				return (int) (settings.maxDisplayTime - (Time.fixedTime - _startedAt));
			}
		}

		void Update() {
			if (timesUp) {
				Queue.RemoveAt(0);
				_startedAt = Time.fixedTime;
			}
		}
		private float _startedAt = 0;

		public void AddToQueue(string log) {
			if (Queue.Count == 0)
				_startedAt = Time.fixedTime;
			if (!Queue.Exists( val =>  {
				return val == log;
			}))
				Queue.Add (log);
		}

		void OnGUI () {
			if (settings.printToScreen && Queue.Count > 0) {
				var text = timeRemaining + " â€“ " + Queue[0];
				GUIStyle style = new GUIStyle ();
//				style.fontSize = 50;
				style.richText = true;
				style.wordWrap = true;
				style.alignment = TextAnchor.LowerLeft;
				style.padding.left = style.padding.right = style.padding.top = style.padding.bottom = 20;
//				style.border
				GUI.Label (new Rect (0, 0, Screen.width, Screen.height), text, style);
			}
		}


	}


}

