// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

namespace RMX
{
	public interface ISingleton {
		string name { get; }
//		ISingleton Singleton { get; set; }
		bool Destroyed { get; }
	}


	public abstract class ASingleton<T> : RMXObject, ISingleton, EventListener
	where T : RMXObject, EventListener, ISingleton {

		private static T _singleton = null;

		private static bool _isInitialized = false;


		protected virtual bool SetupComplete {
			get{ 
				return true;
			}
		}

		public static bool IsInitialized {
			get {
				return _isInitialized && (_singleton as ASingleton<T>).SetupComplete;
			}
		}



		protected GameController gameController {
			get {
				return GameController.current;
			}
		}

		protected GameData gameData {
			get {
				return GameData.current;
			}
		}

		protected GameCenter gameCenter {
			get {
				return GameCenter.current;
			}
		}

		protected Settings settings {
			get {
				return Settings.current;
			}
		}

		public static T current {
			get {
				if (IsInitialized) {
					return _singleton as T;
				} else {
					return Initialize() as T;
				}
			}
		}

		const string tempName = "324329hrNhfeuwh9";
		private bool _destroyed = false;
		public bool Destroyed {
			get {
				return _destroyed;
			}
		}




		public static T Initialize() {
			if (IsInitialized) 
				return _singleton;
			else {// if (ReadyToInitialize<T>()) {
				var aSingleton = new GameObject (tempName).AddComponent<T> ();
				if ((aSingleton as ISingleton).Destroyed) {
					return null;
				}
				aSingleton.gameObject.name = aSingleton.GetType ().Name;
//				aSingleton.name = aSingleton.gameObject.name;
				if (!(aSingleton is GameController)) {
					var parent = GameController.current.gameObject;
					aSingleton.gameObject.transform.SetParent (parent.transform);
				}
//				if ((aSingleton as ASingleton<T>).AddToGlobalListeners) {
//					Notifications.AddListener(aSingleton);
//				}
				return aSingleton;
			} 
		}

		/// <summary>
		/// Gets a value indicating whether this <see cref="RMX.ASingleton`1"/> add to global listeners.
		/// </summary>
		/// <value><c>true</c> if add to global listeners; otherwise, <c>false</c>.</value>
		private bool AddToGlobalListeners { 
			get {
				System.Type classType = typeof(T);
				foreach (string vMethod in ListenerMethods) {
					MethodInfo method = classType.GetMethod (vMethod);
					if (method.DeclaringType != typeof(RMXObject)) 
						return true;
				}
				return false;
			}
		}

		private void warining() {
			if (!Settings.IsInitialized)
				Debug.LogWarning ("Setting not initialized before debugger");
		}

		/// <summary>
		/// Checks whether a singleton already exists. If so, object is destroyed.
		/// Otherwise it checks whether the EventListener methods have been overriden. If so, the object is added to the global EventListeners.
		/// </summary>
		protected void Awake() {
			var message = "__new__ <color=lightblue>" + this.GetType().Name + "</color>()";
			if (_singleton == null) {
				DontDestroyOnLoad (gameObject);
				_singleton = this as T;// as T;
				if (AddToGlobalListeners)
					Notifications.AddListener(this);
			} 
			else if (_singleton != this) {
				if (gameObject.name == tempName) {// gameObject.name == this.GetType().Name &&
					message += " -- <color=red> DELETING REDUNDANT " + this.GetType().Name + "</color>()";
					_destroyed = true;
					Destroy (gameObject);
					Destroy (this);
				} else {
					message += " -- <color=orange> DELETING REDUNDANT ASingleton: </color> " + this.GetType().Name + "</color>()";
					_destroyed = true;
					Destroy(this);
				}
			}
			if (Bugger.WillLog(Testing.Singletons, message))
				Debug.Log (Bugger.Last);

			_isInitialized = true;
		}

	}
}

